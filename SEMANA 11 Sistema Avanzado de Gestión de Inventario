import json

class Producto:
    def __init__(self, id, nombre, cantidad, precio):
        self.id = id
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def get_id(self):
        return self.id

    def get_nombre(self):
        return self.nombre

    def get_cantidad(self):
        return self.cantidad

    def set_cantidad(self, cantidad):
        self.cantidad = cantidad

    def get_precio(self):
        return self.precio

    def set_precio(self, precio):
        self.precio = precio

    def __str__(self):
        return f"ID: {self.id}, Nombre: {self.nombre}, Cantidad: {self.cantidad}, Precio: {self.precio}"

class Inventario:
    def __init__(self, archivo="inventario.json"):
        self.archivo = archivo
        self.productos = self._cargar()

    def _cargar(self):
        try:
            with open(self.archivo, "r") as f:
                data = json.load(f)
                return {p['id']: Producto(**p) for p in data}
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _guardar(self):
        try:
            with open(self.archivo, "w") as f:
                data = [p.__dict__ for p in self.productos.values()]
                json.dump(data, f, indent=4)
        except Exception as e:
            print(f"Error al guardar: {e}")

    def agregar(self, producto):
        if producto.id in self.productos:
            print("¡ID repetido!")
            return
        self.productos[producto.id] = producto
        self._guardar()

    def eliminar(self, id):
        if id in self.productos:
            del self.productos[id]
            self._guardar()
        else:
            print("¡Producto no encontrado!")

    def actualizar(self, id, cantidad=None, precio=None):
        if id in self.productos:
            producto = self.productos[id]
            if cantidad is not None:
                producto.set_cantidad(cantidad)
            if precio is not None:
                producto.set_precio(precio)
            self._guardar()
        else:
            print("¡Producto no encontrado!")

    def buscar(self, nombre):
        return [p for p in self.productos.values() if nombre.lower() in p.nombre.lower()]

    def mostrar(self):
        for producto in self.productos.values():
            print(producto)

def menu():
    inventario = Inventario()
    while True:
        print("\n1. Agregar  2. Eliminar  3. Actualizar  4. Buscar")
        print("5. Mostrar  6. Salir")

        opcion = input("Opción: ")

        try:
            if opcion == '1':
                id = input("ID: ")
                nombre = input("Nombre: ")
                cantidad = int(input("Cantidad: "))
                precio = float(input("Precio: "))
                inventario.agregar(Producto(id, nombre, cantidad, precio))
            elif opcion == '2':
                inventario.eliminar(input("ID: "))
            elif opcion == '3':
                id = input("ID: ")
                cant = input("Cantidad (dejar vacío para no cambiar): ")
                precio = input("Precio (dejar vacío para no cambiar): ")
                inventario.actualizar(id, int(cant) if cant else None, float(precio) if precio else None)
            elif opcion == '4':
                for p in inventario.buscar(input("Nombre: ")):
                    print(p)
            elif opcion == '5':
                inventario.mostrar()
            elif opcion == '6':
                break
            else:
                print("Opción inválida")
        except ValueError:
            print("¡Error en los datos!")
        except Exception as e:
            print(f"¡Error inesperado!: {e}")

if __name__ == "__main__":
    menu()
