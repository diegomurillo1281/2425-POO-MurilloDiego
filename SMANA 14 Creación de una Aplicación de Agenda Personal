import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry  # Necesitas instalar este paquete: pip install tkcalendar

class AgendaApp:
    def __init__(self, master):
        self.master = master
        master.title("Agenda Personal")

        # Variables para almacenar los eventos
        self.eventos = []

        # --- Frames para organizar la interfaz ---
        self.frame_lista = tk.Frame(master)
        self.frame_lista.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        self.frame_entrada = tk.Frame(master)
        self.frame_entrada.pack(pady=10, padx=10, fill=tk.X)

        self.frame_botones = tk.Frame(master)
        self.frame_botones.pack(pady=10, padx=10)

        # --- Sección para mostrar la lista de eventos (TreeView) ---
        self.tree = ttk.Treeview(self.frame_lista, columns=("Fecha", "Hora", "Descripción"))
        self.tree.heading("#0", text="ID")
        self.tree.heading("Fecha", text="Fecha")
        self.tree.heading("Hora", text="Hora")
        self.tree.heading("Descripción", text="Descripción")
        self.tree.column("#0", width=30)
        self.tree.column("Fecha", width=100)
        self.tree.column("Hora", width=80)
        self.tree.column("Descripción", width=300)
        self.tree.pack(fill=tk.BOTH, expand=True)

        # --- Sección para la entrada de datos ---
        self.label_fecha = tk.Label(self.frame_entrada, text="Fecha:")
        self.label_fecha.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.cal = DateEntry(self.frame_entrada, width=12, background="darkblue", foreground="white", borderwidth=2)
        self.cal.grid(row=0, column=1, padx=5, pady=5)

        self.label_hora = tk.Label(self.frame_entrada, text="Hora:")
        self.label_hora.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_hora = tk.Entry(self.frame_entrada)
        self.entry_hora.grid(row=1, column=1, padx=5, pady=5)

        self.label_descripcion = tk.Label(self.frame_entrada, text="Descripción:")
        self.label_descripcion.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_descripcion = tk.Entry(self.frame_entrada, width=40)
        self.entry_descripcion.grid(row=2, column=1, padx=5, pady=5, columnspan=2, sticky=tk.W)

        # --- Sección de botones ---
        self.boton_agregar = tk.Button(self.frame_botones, text="Agregar Evento", command=self.agregar_evento)
        self.boton_agregar.pack(side=tk.LEFT, padx=10)

        self.boton_eliminar = tk.Button(self.frame_botones, text="Eliminar Evento", command=self.eliminar_evento)
        self.boton_eliminar.pack(side=tk.LEFT, padx=10)

        self.boton_salir = tk.Button(self.frame_botones, text="Salir", command=master.quit)
        self.boton_salir.pack(side=tk.RIGHT, padx=10)

        # --- Inicializar la lista de eventos ---
        self.actualizar_lista()

    def agregar_evento(self):
        """Obtiene los datos de los campos de entrada y agrega un nuevo evento a la lista."""
        fecha = self.cal.get()
        hora = self.entry_hora.get()
        descripcion = self.entry_descripcion.get()

        if not fecha or not hora or not descripcion:
            messagebox.showerror("Error", "Por favor, complete todos los campos.")
            return

        nuevo_evento = {"fecha": fecha, "hora": hora, "descripcion": descripcion}
        self.eventos.append(nuevo_evento)
        self.actualizar_lista()

        # Limpiar los campos después de agregar
        self.cal.set_date(None)
        self.entry_hora.delete(0, tk.END)
        self.entry_descripcion.delete(0, tk.END)

    def eliminar_evento(self):
        """Elimina el evento seleccionado de la lista."""
        seleccion = self.tree.selection()
        if not seleccion:
            messagebox.showwarning("Advertencia", "Por favor, seleccione un evento para eliminar.")
            return

        respuesta = messagebox.askyesno("Confirmar Eliminación", "¿Está seguro de que desea eliminar el evento seleccionado?")
        if respuesta:
            item = self.tree.item(seleccion[0])
            item_id = int(item["text"]) - 1  # Obtener el índice del evento en la lista
            if 0 <= item_id < len(self.eventos):
                del self.eventos[item_id]
                self.actualizar_lista()
                messagebox.showinfo("Información", "Evento eliminado correctamente.")

    def actualizar_lista(self):
        """Borra y actualiza la lista de eventos en el Treeview."""
        # Borrar elementos existentes
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Insertar los nuevos eventos
        for index, evento in enumerate(self.eventos):
            self.tree.insert("", tk.END, text=str(index + 1), values=(evento["fecha"], evento["hora"], evento["descripcion"]))

if __name__ == "__main__":
    root = tk.Tk()
    app = AgendaApp(root)
    root.mainloop()
